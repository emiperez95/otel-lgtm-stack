version: '3.8'

name: otel-lgtm-stack

services:
  # OpenTelemetry Collector - Central telemetry hub
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    command: ["--config=/etc/otel-collector.yaml"]
    volumes:
      - ./config/otel-collector.yaml:/etc/otel-collector.yaml:ro
      - ./storage/otel:/var/lib/otel/storage  # Persistent queue storage
    ports:
      - "${OTEL_GRPC_PORT:-4317}:4317"     # OTLP gRPC
      - "${OTEL_HTTP_PORT:-4318}:4318"     # OTLP HTTP
      - "${OTEL_METRICS_PORT:-8888}:8888"  # Collector metrics
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    restart: unless-stopped
    networks:
      - telemetry
    depends_on:
      - prometheus
      - loki
      - tempo

  # Prometheus - Metrics storage
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION:-30d}'
      - '--web.enable-lifecycle'
      - '--web.enable-remote-write-receiver'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    restart: unless-stopped
    networks:
      - telemetry

  # Loki - Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: loki
    command: -config.file=/etc/loki/loki-config.yaml
    volumes:
      - ./config/loki-config.yaml:/etc/loki/loki-config.yaml:ro
      - loki-data:/loki
    ports:
      - "${LOKI_PORT:-3100}:3100"
    restart: unless-stopped
    networks:
      - telemetry

  # Tempo - Distributed tracing
  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./config/tempo.yaml:/etc/tempo.yaml:ro
      - tempo-data:/var/tempo
    ports:
      - "${TEMPO_PORT:-3200}:3200"     # Tempo query frontend
      - "${TEMPO_GRPC_PORT:-9095}:9095" # Tempo gRPC
    restart: unless-stopped
    networks:
      - telemetry

  # Grafana - Visualization layer
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-changeme}
      - GF_INSTALL_PLUGINS=${GRAFANA_PLUGINS:-}
      - GF_SERVER_ROOT_URL=http://${GRAFANA_HOST:-localhost}:${GRAFANA_PORT:-8439}
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    volumes:
      - ./provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./dashboards:/var/lib/grafana/dashboards:ro
      - grafana-data:/var/lib/grafana
    ports:
      - "${GRAFANA_PORT:-8439}:3000"
    restart: unless-stopped
    networks:
      - telemetry
    depends_on:
      - prometheus
      - loki
      - tempo

networks:
  telemetry:
    driver: bridge

volumes:
  prometheus-data:
    driver: local
  loki-data:
    driver: local
  tempo-data:
    driver: local
  grafana-data:
    driver: local