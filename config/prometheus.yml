# Prometheus Configuration
# Generic configuration for metrics collection and storage

global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    monitor: 'otel-lgtm'
    environment: '${ENVIRONMENT:-development}'

# Note: Remote write receiver is enabled via command flag in docker-compose.yml
# This allows Prometheus to receive metrics from the OTel Collector

scrape_configs:
  # Self-monitoring
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
        labels:
          service: 'prometheus'

  # OpenTelemetry Collector metrics
  - job_name: 'otel-collector'
    static_configs:
      - targets: ['otel-collector:8889']
        labels:
          service: 'otel-collector'
    metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(up|.*_duration_seconds|.*_size_bytes|.*_total|.*_created)'
        action: keep

  # Grafana metrics
  - job_name: 'grafana'
    static_configs:
      - targets: ['grafana:3000']
        labels:
          service: 'grafana'

  # Loki metrics
  - job_name: 'loki'
    static_configs:
      - targets: ['loki:3100']
        labels:
          service: 'loki'
    metrics_path: '/metrics'

  # Tempo metrics
  - job_name: 'tempo'
    static_configs:
      - targets: ['tempo:3200']
        labels:
          service: 'tempo'
    metrics_path: '/metrics'

# Recording rules for aggregation
rule_files:
  # - '/etc/prometheus/rules/*.yml'

# Alerting configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets: []
          # Uncomment to add AlertManager
          # - 'alertmanager:9093'